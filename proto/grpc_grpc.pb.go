// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: grpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MultiService_Register_FullMethodName      = "/internal.MultiService/Register"
	MultiService_Login_FullMethodName         = "/internal.MultiService/Login"
	MultiService_AddTextData_FullMethodName   = "/internal.MultiService/AddTextData"
	MultiService_AddBinaryData_FullMethodName = "/internal.MultiService/AddBinaryData"
	MultiService_AddCardData_FullMethodName   = "/internal.MultiService/AddCardData"
	MultiService_SyncData_FullMethodName      = "/internal.MultiService/SyncData"
)

// MultiServiceClient is the client API for MultiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	AddTextData(ctx context.Context, in *TextDataRequest, opts ...grpc.CallOption) (*Empty, error)
	AddBinaryData(ctx context.Context, in *BinaryDataRequest, opts ...grpc.CallOption) (*Empty, error)
	AddCardData(ctx context.Context, in *CardDataRequest, opts ...grpc.CallOption) (*Empty, error)
	SyncData(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
}

type multiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiServiceClient(cc grpc.ClientConnInterface) MultiServiceClient {
	return &multiServiceClient{cc}
}

func (c *multiServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, MultiService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, MultiService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiServiceClient) AddTextData(ctx context.Context, in *TextDataRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MultiService_AddTextData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiServiceClient) AddBinaryData(ctx context.Context, in *BinaryDataRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MultiService_AddBinaryData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiServiceClient) AddCardData(ctx context.Context, in *CardDataRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MultiService_AddCardData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiServiceClient) SyncData(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, MultiService_SyncData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultiServiceServer is the server API for MultiService service.
// All implementations must embed UnimplementedMultiServiceServer
// for forward compatibility
type MultiServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	AddTextData(context.Context, *TextDataRequest) (*Empty, error)
	AddBinaryData(context.Context, *BinaryDataRequest) (*Empty, error)
	AddCardData(context.Context, *CardDataRequest) (*Empty, error)
	SyncData(context.Context, *SyncRequest) (*SyncResponse, error)
	mustEmbedUnimplementedMultiServiceServer()
}

// UnimplementedMultiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMultiServiceServer struct {
}

func (UnimplementedMultiServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedMultiServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedMultiServiceServer) AddTextData(context.Context, *TextDataRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTextData not implemented")
}
func (UnimplementedMultiServiceServer) AddBinaryData(context.Context, *BinaryDataRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBinaryData not implemented")
}
func (UnimplementedMultiServiceServer) AddCardData(context.Context, *CardDataRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCardData not implemented")
}
func (UnimplementedMultiServiceServer) SyncData(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncData not implemented")
}
func (UnimplementedMultiServiceServer) mustEmbedUnimplementedMultiServiceServer() {}

// UnsafeMultiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiServiceServer will
// result in compilation errors.
type UnsafeMultiServiceServer interface {
	mustEmbedUnimplementedMultiServiceServer()
}

func RegisterMultiServiceServer(s grpc.ServiceRegistrar, srv MultiServiceServer) {
	s.RegisterService(&MultiService_ServiceDesc, srv)
}

func _MultiService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiService_AddTextData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiServiceServer).AddTextData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiService_AddTextData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiServiceServer).AddTextData(ctx, req.(*TextDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiService_AddBinaryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiServiceServer).AddBinaryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiService_AddBinaryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiServiceServer).AddBinaryData(ctx, req.(*BinaryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiService_AddCardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiServiceServer).AddCardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiService_AddCardData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiServiceServer).AddCardData(ctx, req.(*CardDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiService_SyncData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiServiceServer).SyncData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiService_SyncData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiServiceServer).SyncData(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MultiService_ServiceDesc is the grpc.ServiceDesc for MultiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internal.MultiService",
	HandlerType: (*MultiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _MultiService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _MultiService_Login_Handler,
		},
		{
			MethodName: "AddTextData",
			Handler:    _MultiService_AddTextData_Handler,
		},
		{
			MethodName: "AddBinaryData",
			Handler:    _MultiService_AddBinaryData_Handler,
		},
		{
			MethodName: "AddCardData",
			Handler:    _MultiService_AddCardData_Handler,
		},
		{
			MethodName: "SyncData",
			Handler:    _MultiService_SyncData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
